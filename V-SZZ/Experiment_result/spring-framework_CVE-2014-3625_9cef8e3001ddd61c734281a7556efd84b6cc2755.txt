f11815c960e spring-webmvc/src/test/java/org/springframework/web/servlet/resource/AppCacheResourceTransformerTests.java (Brian Clozel 2014-07-10 16:55:25 +0200 77) 
f11815c960e spring-webmvc/src/test/java/org/springframework/web/servlet/resource/AppCacheResourceTransformerTests.java (Brian Clozel 2014-07-10 16:55:25 +0200 78) 		VersionResourceResolver versionResourceResolver = new VersionResourceResolver();
f11815c960e spring-webmvc/src/test/java/org/springframework/web/servlet/resource/AppCacheResourceTransformerTests.java (Brian Clozel 2014-07-10 16:55:25 +0200 79) 		versionResourceResolver
f11815c960e spring-webmvc/src/test/java/org/springframework/web/servlet/resource/AppCacheResourceTransformerTests.java (Brian Clozel 2014-07-10 16:55:25 +0200 81) 
f11815c960e spring-webmvc/src/test/java/org/springframework/web/servlet/resource/AppCacheResourceTransformerTests.java (Brian Clozel 2014-07-10 16:55:25 +0200 82) 		List<ResourceResolver> resolvers = new ArrayList<ResourceResolver>();
f11815c960e spring-webmvc/src/test/java/org/springframework/web/servlet/resource/AppCacheResourceTransformerTests.java (Brian Clozel 2014-07-10 16:55:25 +0200 83) 		resolvers.add(versionResourceResolver);
f11815c960e spring-webmvc/src/test/java/org/springframework/web/servlet/resource/AppCacheResourceTransformerTests.java (Brian Clozel 2014-07-10 16:55:25 +0200 78) 		VersionResourceResolver versionResourceResolver = new VersionResourceResolver();
f11815c960e spring-webmvc/src/test/java/org/springframework/web/servlet/resource/AppCacheResourceTransformerTests.java (Brian Clozel 2014-07-10 16:55:25 +0200 79) 		versionResourceResolver
d917b8a9234 (Rossen Stoyanchev 2014-07-28 15:48:21 -0400 80) 				.setStrategyMap(Collections.singletonMap("/**", new ContentVersionStrategy()));
f11815c960e spring-webmvc/src/test/java/org/springframework/web/servlet/resource/AppCacheResourceTransformerTests.java (Brian Clozel 2014-07-10 16:55:25 +0200 82) 		List<ResourceResolver> resolvers = new ArrayList<ResourceResolver>();
f11815c960e spring-webmvc/src/test/java/org/springframework/web/servlet/resource/AppCacheResourceTransformerTests.java (Brian Clozel 2014-07-10 16:55:25 +0200 83) 		resolvers.add(versionResourceResolver);
f11815c960e spring-webmvc/src/test/java/org/springframework/web/servlet/resource/AppCacheResourceTransformerTests.java (Brian Clozel 2014-07-10 16:55:25 +0200 84) 		resolvers.add(new PathResourceResolver());
fa4ba2a82bc (Rossen Stoyanchev 2014-10-14 11:34:28 -0400 50) 		VersionResourceResolver resolver = new VersionResourceResolver();
fa4ba2a82bc (Rossen Stoyanchev 2014-10-14 11:34:28 -0400 51) 		resolver.setStrategyMap(Collections.singletonMap("/**", new ContentVersionStrategy()));
fa4ba2a82bc (Rossen Stoyanchev 2014-10-14 11:34:28 -0400 53) 		List<ResourceResolver> resolvers = Arrays.asList(resolver, new PathResourceResolver());
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 4) import java.util.List;
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 5) 
8325b100803 (Juergen Hoeller 2014-10-21 00:30:42 +0200 12) import static org.junit.Assert.*;
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 21) 
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 23) 
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 28) 
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 29) 		List<ResourceResolver> resolvers = new ArrayList<>();
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 30) 		resolvers.add(new PathResourceResolver());
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 32) 
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 33) 		this.locations = new ArrayList<>();
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 37) 	@Test
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 38) 	public void resolveResourceInternal() {
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 39) 		String file = "bar.css";
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 40) 		Resource expected = new ClassPathResource("test/" + file, getClass());
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 42) 
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 3) import java.util.ArrayList;
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 4) import java.util.List;
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 22) 	private ResourceResolverChain chain;
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 24) 	private List<Resource> locations;
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 29) 		List<ResourceResolver> resolvers = new ArrayList<>();
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 30) 		resolvers.add(new PathResourceResolver());
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 31) 		this.chain = new DefaultResourceResolverChain(resolvers);
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 33) 		this.locations = new ArrayList<>();
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 34) 		this.locations.add(new ClassPathResource("test/", getClass()));
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 38) 	public void resolveResourceInternal() {
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 39) 		String file = "bar.css";
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 40) 		Resource expected = new ClassPathResource("test/" + file, getClass());
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 41) 		Resource actual = this.chain.resolveResource(null, file, this.locations);
72baa9bf274 (Brian Clozel 2014-06-12 10:54:41 +0200 43) 		assertEquals(expected, actual);
2218cdb16f2 org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java (Juergen Hoeller 2011-07-25 10:57:50 +0000 240) 	 * Validates the given path: returns {@code true} if the given path is not a valid resource path.
2218cdb16f2 org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java (Juergen Hoeller 2011-07-25 10:57:50 +0000 241) 	 * <p>The default implementation rejects paths containing "WEB-INF" or "META-INF" as well as paths
2218cdb16f2 org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java (Juergen Hoeller 2011-07-25 10:57:50 +0000 242) 	 * with relative paths ("../") that result in access of a parent directory.
2218cdb16f2 org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java (Juergen Hoeller 2011-07-25 10:57:50 +0000 244) 	 * @return {@code true} if the path has been recognized as invalid, {@code false} otherwise
fd7e0b405b1 org.springframework.web.servlet/src/main/java/org/springframework/web/servlet/resource/ResourceHttpRequestHandler.java (Rossen Stoyanchev 2011-07-22 16:27:33 +0000 247) 		return (path.contains("WEB-INF") || path.contains("META-INF") || StringUtils.cleanPath(path).startsWith(".."));
fa4ba2a82bc (Rossen Stoyanchev 2014-10-14 11:34:28 -0400 49) 		VersionResourceResolver resolver = new VersionResourceResolver();
fa4ba2a82bc (Rossen Stoyanchev 2014-10-14 11:34:28 -0400 50) 		resolver.setStrategyMap(Collections.singletonMap("/**", new ContentVersionStrategy()));
fa4ba2a82bc (Rossen Stoyanchev 2014-10-14 11:34:28 -0400 51) 		List<ResourceResolver> resolvers = Arrays.asList(resolver, new PathResourceResolver());
